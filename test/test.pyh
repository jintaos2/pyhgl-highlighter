


from pyhgl.hgl.Module import *
from pyhgl.hgl._condition import *
from pyhgl import config



config.logger.info("----------------------- Bundle test:")

 
def AdderIO(width, *args):
    return Bundle(
        x = UInt(1, w=width),
        y = Vec.Full(UInt("16'd3"), 4),
        z = Bundle(
            valid = UInt(True),
            ready = UInt(False)
        )        
    )


c = AdderIO(8)
print(c)

@enum
def state_t(a,b,c,d):...
    
print(state_t) 


priority ('priority_case0000'):
    case '1111': ... 
    case ...: ... 
parallel ('parallel_case0000'):
    case ('11','000'): ... 
    case [('11','000'),'xxx']: 
        priority('parallel_case1111'):
            case '1111': ... 
            case ...: ... 

when UInt('1101'):
    p() 
    when UInt('0000'):
        p()
        priority UInt('0001'):
            case '11': p()  
            case '111': p()
            case ...: p() 
    elsewhen UInt('1100'):
        p()
    otherwise:
        p()
        parallel UInt('1111'):
            case [('??','11'), ('11','1?')]:
                p()
            case ('1', '00', '1'):
                p()
            case ...:
                p()

config.logger.info("----------------------- Module test:")


def mylogic(sel, a, b) -> Signal:
    ret = Wire(a)
    with _when(sel):
        ret <<= b 
    return ret


@module mymodule(width, *args):
    io = IO(Bundle(
        a = Input(UInt("4'b0010")),
        b = Input(UInt("4'b0100")),
        c = Output(UInt("8'b1111")) 
    ))
    x = Wire(io.a | io.b)  # 0110
    y = Wire( ~(x & "4'b0111")) # 1001
    z = Mux(UInt("2'b1"), x, y) # 0110
    m = Slice(y, 3, 1)      # 100
    n = Cat(UInt(1),z,m)    # 10110100
    c_next = Reg(~n, reset_value=UInt("8'h0"))
    c_next_next = Reg(c_next, reset_value=UInt("8'haa"))
    io.c <<= c_next_next        # 01001011

    when(io.a):
        c_next <<= c_next_next
    
    when io.b:
        when(c_next):
            io.c <<= "8'hff"
        otherwise:
            io.c <<= mylogic(c_next, n, c_next_next)
        



m = mymodule(8,'k',[1,2])
c = Circuit(m)

c.show()

"""
for i in range(6):
    print('-----------------')
    c.step()
    print(m.c_next,end='')
    print(m.c_next_next,end='')
    print(m.io.c)
"""

from pyhgl.parser import * 
from pyhgl.parser.hgl_tokenizer import _tokenize

src=""" 
a + _not(b)
"""

# for i in hgl_tokenize(src):
#     print(i)
    
tree = hgl_parse(src,"aaa")

print(ast_dump(tree))
# compile(tree, "aaa", 'exec')

def _nameassign(n:str, b):
    print(n,b)
    return b

def _logicnot(a):
    return False

def _logicand(a,b):
    return True 

def _logicor(a,b):
    return a or b 


def _slshift(a,b):
    return a-b 

def _cat(a,b): return a+b 
def _slshift(a,b): return a<< b 
def _srshift(a,b): return a>> b

print(3 && 1 ||2<<< 3 >>> 2)

a<~b <~>c~>d

x.=b

x ++ y

print()
print(-2) 
!dfjf
!! fd
!adskfl

@conf TOP(self):
    x = 2 
    y = 2
xxx _cat(a,b): 

!def*
' def '
# def  

a.b.c.d()

a or b or c 

a <== b <- c ::= d 




@module Top_A(B): 
    X = Top_A_X()
    A_out = Output(Reg(UInt(Conf.width1)))
    io = [A_out]
    A_out <<= X.out & B.x1.c

@module Top_A_X:
    x = UInt(5, Conf.width)
    y = UInt(5, Conf.width1)
    z = x & y 
    out = ~ z

@module Top_B:
    x1 = Top_B_X()
    x2 = Top_B_X()
    
    x1.b <<= x2.b